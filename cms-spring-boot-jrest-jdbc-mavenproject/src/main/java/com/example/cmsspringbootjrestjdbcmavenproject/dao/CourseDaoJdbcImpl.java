package com.example.cmsspringbootjrestjdbcmavenproject.dao;

import java.sql.Connection;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.sql.Statement;

import org.springframework.stereotype.Repository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import  com.example.cmsspringbootjrestjdbcmavenproject.model.InstructorPojo;
import  com.example.cmsspringbootjrestjdbcmavenproject.model.CoursePojo;

//@Component
@Repository
public class  CourseDaoJdbcImpl implements CourseDao {
	
	Logger logger = LoggerFactory.getLogger(CourseDaoJdbcImpl.class);

	@Override
	public List<CoursePojo> getAllCourses() {
		logger.info("Entered fetchAllCourses()...\"");
		Connection conn = DBUtil.makeConnection();
		List<CoursePojo> allCourses = new ArrayList<>();
		try {
			PreparedStatement ps = conn.prepareStatement(DBNativeSqlQueries.GetAllCourses);
			ResultSet rs  = ps.executeQuery();
			while(rs.next()) {
				 CoursePojo coursePojo = new CoursePojo(
					        rs.getInt(1),          // courseId
					        rs.getString(2),       // courseName
					        rs.getString(3),       // location
					        rs.getInt(4),          // courseFee
					        rs.getInt(6),          // durationInWeeks
					        rs.getString(7),       // level
					        new InstructorPojo(
					            rs.getInt(5),      // instructorId
					            null,              // instructorName (replace with actual value from ResultSet)
					            0     // contactNo (replace with actual value from ResultSet)
					        )
					    );
					    allCourses.add(coursePojo);
					    
					        // level  "SELECT courseId, courseName, location, courseFee, instructorId ,durationInWeeks,level FROM course";
					
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("Exited fetchAllBook()...");
		return allCourses;
	}

	@Override
	public Optional<CoursePojo> getCourseById(int CourseId) {    //Optional is a container object that may or may not contain a non-null value
		logger.info("Entered fetchABook()...");
		Connection  conn = DBUtil.makeConnection();
		Optional<CoursePojo> courseOptional = Optional.empty();
		try {
			PreparedStatement ps = conn.prepareStatement(DBNativeSqlQueries.getCourse_By_ID);
			ps.setInt(1, CourseId);
			
			ResultSet rs = ps.executeQuery();
			if(rs.next()) {
				 
				 
		            
		         CoursePojo coursePojo = new CoursePojo( rs.getInt(1),    // Retrieves the integer value from the first column of the current row in the ResultSet.
					        rs.getString(2),       // courseName
					        rs.getString(3),       // location
					        rs.getInt(4),          // courseFee
					        rs.getInt(6),          // durationInWeeks
					        rs.getString(7),       // level
					        new InstructorPojo(
					            rs.getInt(5),      // instructorId
					            null,              // instructorName (replace with actual value from ResultSet)
					            0     // contactNo (replace with actual value from ResultSet)
					        )
					    );
		         courseOptional = Optional.of(coursePojo)	;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("Exited fetchABook()...");
		return courseOptional;
	}

	@Override
	public void removeCourse(int CourseId) {
		Connection conn =DBUtil.makeConnection();
		try {
			PreparedStatement ps= conn.prepareStatement(DBNativeSqlQueries.DeleteCourse);
			ps.setInt(1, CourseId);
			ps.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	@Override
	public CoursePojo addCourse(CoursePojo newCourse) {
		Connection conn = DBUtil.makeConnection();
		try {
			PreparedStatement ps = conn.prepareStatement(DBNativeSqlQueries.AddCourse);
			ps.setString(1, newCourse.getCourseName());
			ps.setString(2, newCourse.getLocation());
			ps.setInt(3, newCourse.getCourseFee());
			ps.setInt(4, newCourse.getInstructor().getInstructorId());
			ps.setInt(5, newCourse.getDurationInWeeks());
			ps.setString(6, newCourse.getLevel());
			
			 ps.executeUpdate();
			 // we have to get the autogenerated primary key value
				String query = "select last_insert_id()";
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(query);
				rs.next();
				newCourse.setCourseId(rs.getInt(1));
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return newCourse;
	}

	@Override
	public CoursePojo updateCourse(CoursePojo updateCourse) {
		Connection conn = DBUtil.makeConnection();
		try {
			PreparedStatement ps = conn.prepareStatement(DBNativeSqlQueries.UpdateCourse);
			ps.setString(1, updateCourse.getCourseName());
			ps.setString(2, updateCourse.getLocation());
			ps.setInt(3, updateCourse.getCourseFee());
			ps.setInt(4, updateCourse.getDurationInWeeks());
			ps.setString(5, updateCourse.getLevel());
			
			ps.setInt(6, updateCourse.getCourseId());
		    ps.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return updateCourse;
	}

	@Override
	public List<CoursePojo> getCourseByName(String CourseName) {
		System.out.println(CourseName);
		Connection conn = DBUtil.makeConnection();
		List<CoursePojo> Allcourse = new ArrayList<>();
		try {
			
			PreparedStatement ps = conn.prepareStatement(DBNativeSqlQueries.getCourseByName);
			ps.setString(1, CourseName);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				
				  CoursePojo course = new CoursePojo(   
						 rs.getInt(1),          // courseId
		                    rs.getString(2),          // courseName
		                    rs.getString(3),          // location
		                    rs.getInt(4),             // courseFee
		                    rs.getInt(6),             // durationInWeeks
		                    rs.getString(7),          // level
		                    new InstructorPojo(
		                            rs.getInt(5),     // instructorId
		                            null,             // instructorName (replace with actual value from ResultSet)
		                            0                // contactNo (replace with actual value from ResultSet)
		                    )
			            );
				  System.out.println("course : " + course);
				  Allcourse.add(course);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Allcourse;
	}

}
